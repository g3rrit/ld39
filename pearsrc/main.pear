include"pstd"
include"SDL2/SDL"
include"objectmanager"
include"gamestate"
include"scenemanager"
local include"gfx"
local include"input"
local include"view"
include"SDL2/SDL_ttf"
local include"fontmanager"

main : () -> int 
{
    window.init();
    sceneManager.init();
    gameContainer.start();

    sceneManager.delete();
    window.delete();
    event.delete();

    return 0;
}

GameContainer : struct
{
    start : () -> void 
    {
        //main loop
        sdlevent : SDL_Event;
        quit : bool = false;
 
        //TODO check if this works
        currentTime : struct timeval;
        gettimeofday(&currentTime,null);
 
        lastTime : f64 = (currentTime.tv_sec * 1000000 + currentTime.tv_usec) / 1000000.0;
        firstTime : f64 = 0;
        passedTime : f32 = 0;
        unprocessedTime : f32 = 0;
        frameTime : f32 = 0;
        frames : int = 0;
        render : bool = true;
 
        frameCap : f32 = 1.0 / 30.0;
        FPS : int = 0;

        fontManager.add("fpstxt", "FPS:", gameState.WIDTH - 100, 5, 60,15);
        fontManager.add("fpsnum", "00", gameState.WIDTH - 40, 5, 40, 15);
 
        while(!quit)
        {
            
            while(SDL_PollEvent(&sdlevent))
            {
                if(sdlevent.type == SDL_QUIT)
                {
                    quit = true;
                }
                else if(sdlevent.type == SDL_KEYDOWN)
                {
                }
                else if(sdlevent.type == SDL_MOUSEBUTTONDOWN)
                {
                }
            } 

            gettimeofday(&currentTime,null);
            firstTime = (currentTime.tv_sec * 1000000 + currentTime.tv_usec) / 1000000.0;
            //printf("time = %f \n", firstTime);
            passedTime = firstTime - lastTime;
            lastTime = firstTime;
    
            unprocessedTime = unprocessedTime + (f32)passedTime;
            frameTime = frameTime + passedTime;
  
            //printf("unprocessed : %f , framecap : %f fps : %i \n", unprocessedTime, frameCap, FPS);
 
            while(unprocessedTime >= frameCap)
            {
                gameContainer.update((f32)frameCap);
                unprocessedTime = unprocessedTime - frameCap;
                render = true;
 
                if(frameTime >= 1)
                {
                    //printf("FPS: %i \n", FPS);
                    fpsnum[12] : char; 
                    //itoa(FPS, fpsnum, 10);
                    snprintf(fpsnum, 12, "%d",FPS);
                    fontManager.setText("fpsnum", &fpsnum);
                    frameTime = 0;
                    FPS = frames;
                    frames = 0;
                }
            }
 
            if(render)
            {
                //render the scene
                SDL_RenderClear(window.ren);
                //render stuff
                gameContainer.draw();
                //
                SDL_RenderPresent(window.ren);
 
                frames ++;
                render = false;
            }
            else
            {
                usleep(10000);
            }

        }
 
        //SDL_DestroyTexture(tex);
        gameContainer.stop();
    }

    stop : () -> void
    {
        event.dispatch("stop", null);
    }

    draw : () -> void
    {
        sceneManager.draw();
        event.dispatch("draw", null);
    }
    
    update : (dt : f32) -> void
    {
        input.update(dt);
        gameState.dt = dt;
        sceneManager.update(dt);
        view.update(dt);
        event.dispatch("update",null);
    }
        
} : gameContainer

Window : struct
{
    win : SDL_Window* = null;
    ren : SDL_Renderer* = null;

    font : TTF_Font* = null;

    init : () -> bool
    {
        if(SDL_Init(SDL_INIT_VIDEO) != 0)
        {
            printf("error initing sdl\n");
        }
        printf("sdl inited\n");

        TTF_Init();

        window.font = TTF_OpenFont("/../res/font/BitFont.ttf",30);
        if(!window.font)
        {
            printf("error loading font\n");
            SDL_Quit();
            TTF_Quit();
            return false;
        } 

        sdlwindow : SDL_Window* = SDL_CreateWindow("Explore", 100,100,gameState.WIDTH, gameState.HEIGHT, SDL_WINDOW_SHOWN);
        if(sdlwindow == null)
        {
            printf("Error creating window");
            SDL_Quit();
            return false;
        }
        printf("SDL window created \n");
  
        sdlren : SDL_Renderer* = SDL_CreateRenderer(sdlwindow,-1, SDL_RENDERER_ACCELERATED); //| SDL_RENDERER_PRESENTVSYNC);
        if(sdlren == null)
        {
            printf("Error creating renderer");
            SDL_DestroyWindow(sdlwindow);
            SDL_Quit();
 
            return false;
        }
        printf("sdl renderer created \n");
    
        window.win = sdlwindow;
        window.ren = sdlren;

        return true;
    }

    delete : () -> void
    {
        TTF_CloseFont(window.font);
        TTF_Quit();
        SDL_DestroyWindow(window.win);
        SDL_DestroyRenderer(window.ren);
        SDL_Quit();
    }

    
    
} : window


randStr : (length : u32) -> char*
{
    charset[] : char = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

    res : char* = malloc(sizeof(char) * (length));

    res[length-1] = '\0';
    length--;

    while(length > 0)
    {
        index : u32 = (f64)rand()/RAND_MAX * (sizeof(charset) - 1); 
        res[length-1] = charset[index];
        length--;
    } 
    printf("random string: %s\n", res);
    return res;
}
